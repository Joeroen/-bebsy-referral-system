# Docker Compose Configuration for Bebsy Referral System
# Complete production-ready deployment setup

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bebsy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: bebsy_referral_system
      POSTGRES_USER: bebsy_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
      - ./database/seed.sql:/docker-entrypoint-initdb.d/03-seed.sql:ro
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - bebsy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bebsy_user -d bebsy_referral_system"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: bebsy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bebsy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: bebsy-backend
    restart: unless-stopped
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: bebsy_referral_system
      DB_USER: bebsy_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-minimum-32-characters}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      
      # Application
      NODE_ENV: production
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Business Rules
      DEFAULT_REWARD_AMOUNT: ${DEFAULT_REWARD_AMOUNT:-25.00}
      AVERAGE_BOOKING_VALUE: ${AVERAGE_BOOKING_VALUE:-500.00}
      
      # Email (optional)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@bebsy.nl}
      
      # Monitoring
      ENABLE_MONITORING: true
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "3001:3001"
    networks:
      - bebsy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
        REACT_APP_VERSION: ${VERSION:-1.0.0}
    container_name: bebsy-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - bebsy-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bebsy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - bebsy-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: bebsy-backup
    restart: unless-stopped
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: bebsy_referral_system
      PGUSER: bebsy_user
      PGPASSWORD: ${DB_PASSWORD:-secure_password_change_me}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - bebsy-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' > /etc/crontabs/root &&
        crond -f -d 8
      "

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bebsy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bebsy-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bebsy-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - bebsy-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log Management with ELK Stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: bebsy-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - bebsy-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: bebsy-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - ./logs:/logs:ro
    ports:
      - "5044:5044"
    networks:
      - bebsy-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: bebsy-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - bebsy-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

networks:
  bebsy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

---
# Backend Dockerfile
# File: backend/Dockerfile

FROM node:18-alpine AS base
WORKDIR /app
RUN apk add --no-cache curl

# Dependencies stage
FROM base AS dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Development stage
FROM base AS development
COPY package*.json ./
RUN npm ci
COPY . .
EXPOSE 3001
CMD ["npm", "run", "dev"]

# Build stage
FROM base AS build
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build 2>/dev/null || echo "No build script found"

# Production stage
FROM base AS production
ENV NODE_ENV=production
RUN addgroup -g 1001 -S nodejs && \
    adduser -S bebsy -u 1001

# Copy dependencies
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=build /app .

# Create necessary directories
RUN mkdir -p uploads logs backups && \
    chown -R bebsy:nodejs uploads logs backups

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3001/api/health || exit 1

USER bebsy
EXPOSE 3001
CMD ["node", "server.js"]

---
# Frontend Dockerfile
# File: frontend/Dockerfile

FROM node:18-alpine AS base
WORKDIR /app

# Dependencies stage
FROM base AS dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Development stage
FROM base AS development
COPY package*.json ./
RUN npm ci
COPY . .
EXPOSE 3000
CMD ["npm", "start"]

# Build stage
FROM base AS build
ARG REACT_APP_API_URL
ARG REACT_APP_VERSION
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_VERSION=$REACT_APP_VERSION
ENV GENERATE_SOURCEMAP=false

COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine AS production
COPY --from=build /app/build /usr/share/nginx/html
COPY nginx/default.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

---
# Nginx Configuration
# File: nginx/nginx.conf

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # Upstream backends
    upstream backend {
        server backend:3001 max_fails=3 fail_timeout=30s;
    }

    upstream frontend {
        server frontend:80 max_fails=3 fail_timeout=30s;
    }

    # Include additional configurations
    include /etc/nginx/conf.d/*.conf;
}

---
# Site Configuration
# File: nginx/conf.d/bebsy.conf

server {
    listen 80;
    server_name localhost bebsy.local;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API routes
    location /api {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Login rate limiting
    location /api/auth/login {
        limit_req zone=login burst=5 nodelay;
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Frontend routes
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # Handle client-side routing
        try_files $uri $uri/ /index.html;
    }

    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Security
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTPS Configuration (uncomment and configure for production)
# server {
#     listen 443 ssl http2;
#     server_name bebsy.nl www.bebsy.nl;
#
#     ssl_certificate /etc/nginx/ssl/bebsy.crt;
#     ssl_certificate_key /etc/nginx/ssl/bebsy.key;
#     
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#
#     # Include same location blocks as above
# }

---
# Backup Script
# File: scripts/backup.sh

#!/bin/sh
set -e

BACKUP_DIR="/backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="bebsy_backup_${TIMESTAMP}.sql"
RETENTION_DAYS=30

echo "Starting backup at $(date)"

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Create database backup
pg_dump \
  --host="$PGHOST" \
  --port="$PGPORT" \
  --username="$PGUSER" \
  --dbname="$PGDATABASE" \
  --no-password \
  --verbose \
  --clean \
  --if-exists \
  --create \
  --format=plain \
  > "$BACKUP_DIR/$BACKUP_FILE"

# Compress backup
gzip "$BACKUP_DIR/$BACKUP_FILE"

echo "Backup created: ${BACKUP_FILE}.gz"

# Clean up old backups
find "$BACKUP_DIR" -name "bebsy_backup_*.sql.gz" -mtime +$RETENTION_DAYS -delete
echo "Cleaned up backups older than $RETENTION_DAYS days"

# Optional: Upload to cloud storage
# if [ ! -z "$AWS_ACCESS_KEY_ID" ]; then
#     aws s3 cp "$BACKUP_DIR/${BACKUP_FILE}.gz" "s3://$S3_BUCKET/backups/"
#     echo "Backup uploaded to S3"
# fi

echo "Backup completed at $(date)"

---
# Environment Configuration
# File: .env.example

# Copy this file to .env and update with your values

# Database
DB_PASSWORD=your_secure_database_password
REDIS_PASSWORD=your_redis_password

# Security
JWT_SECRET=your-super-secure-jwt-secret-minimum-32-characters-long
BCRYPT_ROUNDS=12

# Application
FRONTEND_URL=http://localhost:3000
VERSION=1.0.0

# Business Configuration
DEFAULT_REWARD_AMOUNT=25.00
AVERAGE_BOOKING_VALUE=500.00

# Email Configuration (optional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@bebsy.nl
SMTP_PASSWORD=your-app-password
FROM_EMAIL=noreply@bebsy.nl

# Monitoring (optional)
GRAFANA_PASSWORD=admin_password
LOG_LEVEL=info

# React App Configuration
REACT_APP_API_URL=http://localhost:3001/api

# Cloud Storage (optional)
AWS_ACCESS_KEY_ID=your_aws_key
AWS_SECRET_ACCESS_KEY=your_aws_secret
S3_BUCKET=bebsy-backups

---
# Deployment Scripts
# File: scripts/deploy.sh

#!/bin/bash
set -e

echo "🚀 Deploying Bebsy Referral System..."

# Check if .env file exists
if [ ! -f .env ]; then
    echo "❌ .env file not found. Copy .env.example to .env and configure it first."
    exit 1
fi

# Load environment variables
source .env

# Build and start services
echo "📦 Building and starting services..."
docker-compose up -d --build

# Wait for services to be healthy
echo "⏳ Waiting for services to be ready..."
sleep 30

# Run database migrations if needed
echo "🗄️ Running database setup..."
docker-compose exec postgres psql -U bebsy_user -d bebsy_referral_system -c "SELECT version();"

# Verify deployment
echo "✅ Verifying deployment..."
curl -f http://localhost/health || {
    echo "❌ Health check failed"
    docker-compose logs
    exit 1
}

echo "🎉 Deployment completed successfully!"
echo "📊 Dashboard: http://localhost"
echo "🔧 API: http://localhost/api"
echo "📈 Monitoring: http://localhost:9090 (Prometheus), http://localhost:3003 (Grafana)"

---
# Development Setup
# File: scripts/dev-setup.sh

#!/bin/bash
set -e

echo "🛠️ Setting up Bebsy Referral System for development..."

# Copy environment file
if [ ! -f .env ]; then
    cp .env.example .env
    echo "📝 Created .env file from template. Please update it with your settings."
fi

# Start development services
echo "🚀 Starting development environment..."
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d postgres redis

# Wait for database
echo "⏳ Waiting for database..."
sleep 10

# Install dependencies
echo "📦 Installing backend dependencies..."
cd backend && npm install && cd ..

echo "📦 Installing frontend dependencies..."
cd frontend && npm install && cd ..

# Run database setup
echo "🗄️ Setting up database..."
docker-compose exec postgres psql -U bebsy_user -d bebsy_referral_system -f /docker-entrypoint-initdb.d/02-schema.sql

echo "✅ Development environment ready!"
echo "🔧 Start backend: cd backend && npm run dev"
echo "🎨 Start frontend: cd frontend && npm start"
echo "📊 Database: localhost:5432"
echo "🔴 Redis: localhost:6379"

---
# Production Deployment with SSL
# File: docker-compose.prod.yml

version: '3.8'

services:
  nginx:
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
      - "443:443"

  # Let's Encrypt SSL Certificate Manager
  certbot:
    image: certbot/certbot
    container_name: bebsy-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email admin@bebsy.nl -d bebsy.nl -d www.bebsy.nl --agree-tos
    profiles:
      - ssl

  # Database replication for production
  postgres-replica:
    image: postgres:15-alpine
    container_name: bebsy-postgres-replica
    restart: unless-stopped
    environment:
      PGUSER: replicator
      POSTGRES_PASSWORD: ${REPLICA_PASSWORD}
    command: |
      bash -c "
      pg_basebackup -h postgres -D /var/lib/postgresql/data -U replicator -v -P -W
      echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf
      echo 'primary_conninfo = host=postgres port=5432 user=replicator' >> /var/lib/postgresql/data/recovery.conf
      postgres
      "
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - bebsy-network
    profiles:
      - ha

volumes:
  postgres_replica_data:
    driver: local